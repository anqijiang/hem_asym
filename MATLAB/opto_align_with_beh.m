%% Sig PF code updated for CA1 analysis and good behavior
clear all
close all

[behavior_filepaths, beh_temp]=uigetfile('*cond.mat', 'Chose behavior files to load:','MultiSelect','on');
load([beh_temp behavior_filepaths]);
% start_frame = 258;
% end_frame = 25000;
% behavior.ybinned = behavior.ybinned(start_frame:end_frame);

[cellsort_filepaths, cell_temp]=uigetfile('*suite2p.mat', 'Chose cellsort files to load:','MultiSelect','on');
load([cell_temp cellsort_filepaths]);
% beh_temp = '/home/sheffieldlab/Desktop/NoReward/PlaceFieldCodeTest/NR6/BehaviorData/';
% behavior_filepaths = '/home/sheffieldlab/Desktop/NoReward/PlaceFieldCodeTest/NR6/BehaviorData/';
% cellsort_filepaths = '/home/sheffieldlab/Desktop/NoReward/PlaceFieldCodeTest/NR6/';
% load([behavior_filepaths, 'NR6_Task1_FamiliarReward1_beh_plain1.mat']);
% load([cellsort_filepaths, 'NR6_famrew_famnorewnoclick_famrew_novrew_MotCor_converted_non_rigid_cellsorted_Area-83.25_850_mu-0.6_Th-2_Win-3_3.mat']);


%% Important inputs


% prompt = ['Is optogenetics on or off? 1 for on; 0 for off; 2 for all '];
% opto = input(prompt);
opto = 2;
% startF=484;    % behavior
% endF= 30000;
% startt = 10484;   % imaging
% endt = 40000;
lick_stop_flag = 0;
lick_stop_frame = 1361;
remove_good_beh = 0;
tunnellength= 200;

% if lick_stop_flag
%     figure_folder = fullfile(beh_temp, ['PCFigures' behavior_filepaths(end-10:end-4)] );
%     mkdir(figure_folder);
% else
%     figure_folder = fullfile(beh_temp,['PCFigures' behavior_filepaths(end-10:end-4)]);
%     mkdir(figure_folder);
% end

%Important place cell parameters
%minfieldwidth=10; %in cm
%maxfieldwidth = 125;
minratio=10;%original =3
thresh1=0.15; %only coninous parts of the mean place field above this value are included
minDF=0.09; %orignal = 0.1 %peak of the mean PF must be larger than this value
minrate=0.2; % Change from percetage to number of laps the cell should fire. changefrom 0.4, original =3 %percentage of times a tranisent must occur in the PF
baselength=0.25; %number of lowest values used to calculate a mean baseline value
PVAL_thresh=0.05; %only PF that have pvals lower than this generated by shuffle test will be included
numrand=100;%num iterations for shuffle

% select the corresponding frames in imaging
ind_cell = cell(1,length(start_frame));
for n = 1:length(start_frame)
    ind_cell{1,n} = start_frame(n):end_frame(n);
end
ind = cell2mat(ind_cell);

onFrames_ind = zeros(length(onFrames),1);
offFrames_ind = zeros(length(onFrames),1);
for o = 1:length(onFrames)
    onFrames_ind(o) = min(find(ind>onFrames(o)),[],'all');
    offFrames_ind(o) = max(find(ind<offFrames(o)),[],'all');
end

F=data.F(ind, :);
Fc3_DF=data.Fc3(ind,:);
Fc2=data.Fc(ind,:);
ybinned=behavior.ybinned;


if remove_good_beh==1
    if isfield(behavior,'velocity') && max(behavior.velocity)>0.1
        good_behavior = remove_bad_behavior_ver2(behavior, behavior_filepaths, lick_stop_flag);
    else
        good_behavior = remove_bad_behavior_ver2_withoutvelocity(behavior, behavior_filepaths, lick_stop_flag);
    end
    ybinned_GoodBehav=good_behavior.good_runs;
    F_GoodBehav = F(good_behavior.good_runs_index, :);
    Fc3_DF_GoodBehav=Fc3_DF(good_behavior.good_runs_index, :);
    Fc2_GoodBehav = Fc2(good_behavior.good_runs_index, :);
else
    ybinned_GoodBehav = ybinned;
    F_GoodBehav = F;
    Fc3_DF_GoodBehav=Fc3_DF;
    Fc2_GoodBehav = Fc2;
end
    
if lick_stop_flag
    Fc3_DF_GoodBehav=Fc3_DF_GoodBehav(lick_stop_frame:end, :);
    Fc2_GoodBehav = Fc2_GoodBehav(lick_stop_frame:end, :);
    ybinned_GoodBehav = ybinned_GoodBehav(lick_stop_frame:end);
end

%%%%%%%%%%%%%%%%%%%parameters%%%%%%%%%%%%%%%%%

ybinned_GoodBehav=ybinned_GoodBehav';
E=bwlabel(double_thresh(ybinned_GoodBehav,0.02,0.018)); %labels each traversal
bad_E = bwlabel(double_thresh(ybinned,0.02,0.018));
w=NaN(200,2);
sig_PFs=cell(3,size(Fc2_GoodBehav,2));
sig_PFs_with_noise=cell(3,size(Fc2_GoodBehav,2));
numneurons=size(Fc3_DF_GoodBehav,2);
trackstart=0.01+0.005; %track start location in quake units (+10 accounts for any noise in the track start location after teleportation)
trackend=0.6-0.005; %track end location in quake units
ZThreshDivisor=4;%used to further break up the data in cases of long silent stretches
total_pos_randfields_shuffle=zeros(size(Fc2_GoodBehav,2), 1);
PF_PVALS=NaN(size(Fc2_GoodBehav,2), 1);
PF_width=NaN(3,size(Fc2_GoodBehav,2));
PF_rate=NaN(3,size(Fc2_GoodBehav,2));
PF_ratio=NaN(3,size(Fc2_GoodBehav,2));
PF_dff=NaN(3,size(Fc2_GoodBehav,2));
PF_start_bins=NaN(3,size(Fc2_GoodBehav,2));
PF_end_bins=NaN(3,size(Fc2_GoodBehav,2));
number_of_PFs=NaN(1,size(Fc2_GoodBehav,2));
Allbinned_F = cell(1,size(Fc2_GoodBehav,2));
long = 1:length(E);   %check if the behavior and imaging data aligns well

numbins=round(tunnellength/5);
binsize=(trackend-trackstart)/numbins;%in Quake units

width_M=zeros(1000,1000);
% figure; plot(E); hold on; plot(ybinned_GoodBehav); title('good E')
% figure; plot(bad_E); hold on; plot(ybinned); title('bad E')

% correct E

% construct savefile name
% pat = '-' + wildcardPattern(3,4) + '_';
% env = extract(behavior_filepaths,pat);
% env = env{1,1}(2:end-1);
% env = 'nov2';

pat = textBoundary + lettersPattern + digitsPattern;
mouse = extract(cellsort_filepaths, pat);
mouse = mouse{1,1};
%mouse = 'JR';
pat = '_' + "day" + digitsPattern + '_';
day = extract(cellsort_filepaths, pat);
day = day{1,1}(2:end-1);

wrong_lap=0;
for i=1:max(E)
    onpoint=find(E==i,1);
    offpoint=find(E==i,1,'last');
    %         end
    count=1;
    while max(ybinned_GoodBehav(onpoint:offpoint))<0.55
        count=count+1;
        if i~=max(E)
            offpoint=find(E==i+1,1,'last');
            E(onpoint:offpoint)=i;
            E(offpoint+1:end)=E(offpoint+1:end)-1;
        else
            E(onpoint:offpoint)=0;
        end
        
    end
    
end

wrong_lap=0;
for i=1:max(bad_E)
    onpoint=find(bad_E==i,1);
    offpoint=find(bad_E==i,1,'last');
    %         end
    count=1;
    while max(ybinned(onpoint:offpoint))<0.55
        count=count+1;
        if i~=max(bad_E)
            offpoint=find(bad_E==i+1,1,'last');
            bad_E(onpoint:offpoint)=i;
            bad_E(offpoint+1:end)=bad_E(offpoint+1:end)-1;
        else
            bad_E(onpoint:offpoint)=0;
        end
        
    end
    
end

% % Correct first one's jump
% onpoint=find(E==1,1);
% if ybinned_GoodBehav(onpoint)>0.02
%     start_correct = onpoint;
%     while ybinned_GoodBehav(start_correct)>0.02
%         E(start_correct) = 0;
%         start_correct = start_correct+1;
%     end
%     E = E - 1;
% end
% figure; plot(E); hold on; plot(ybinned_GoodBehav); title('good E corrected')
% figure; plot(bad_E); hold on; plot(ybinned); title('bad E corrected')

nlaps = max(E);
topEdge = trackend; % define limits
botEdge = trackstart; % define limits
binEdges = linspace(botEdge, topEdge, numbins+1);
cell_binMean = zeros(numbins, nlaps, numneurons);
%cell_mean_PF = zeros(numbins,numneurons);

for ii = 1:numneurons
    %fprintf('Analysing Neuron %d \n', ii)
    %%%%%%%%now cut out transients from each lap and bin them%%%%%%%%%%%%%%%%%
    
    %% Plot data if required
    %combinedYpos_rew=[ybinned_GoodBehav Fc3_DF_GoodBehav(:,ii)];
    % Fc2_combined = [ybinned_GoodBehav F_GoodBehav(:,ii)];
    %     figure; subplot(2, 1, 1); plot(combinedYpos_rew); subplot(2, 1,
    %     2); plot(Fc2_combined); pause(2)
    
    %% Separate data into laps and find mean
    [binMean, pos_Fpos_rew] =  bindata_bylap(Fc3_DF_GoodBehav(:,ii), ybinned_GoodBehav, E, numbins, binEdges);
    cell_binMean(:,:,ii) = binMean;
end

if opto == 0
    optoCond = '_opto_off';
elseif opto ==1
    optoCond = '_opto_on';
elseif opto ==2
    optoCond = '_all';
end

[cell_pair_corr, mean_corr] = cell_corr_by_trial(Fc3_DF, E, 30, 300, 0.05);
PCo = pop_coor(cell_pair_corr);
hold on

opto_on_lap = zeros(length(onFrames_ind),1);
opto_off_lap = zeros(length(offFrames_ind),1);
for n = 1:length(onFrames_ind)
    opto_on_lap(n) = max(E(1:onFrames_ind(n)));
%     line([0, opto_on_lap(n)],[opto_on_lap(n),opto_on_lap(n)],'Color','red','LineStyle','--')
%     line([opto_on_lap(n),opto_on_lap(n)],[0, opto_on_lap(n)],'Color','red','LineStyle','--')
    opto_off_lap(n) = max(E(1:offFrames_ind(n)));
%     line([0, opto_off_lap(n)],[opto_off_lap(n),opto_off_lap(n)],'Color','white','LineStyle','--')
%     line([opto_off_lap(n),opto_off_lap(n)],[0, opto_off_lap(n)],'Color','white','LineStyle','--')
    line([opto_on_lap(n),opto_on_lap(n)],[opto_on_lap(n),opto_off_lap(n)],'Color','red','LineStyle','--')
    line([opto_on_lap(n),opto_off_lap(n)],[opto_on_lap(n),opto_on_lap(n)],'Color','red','LineStyle','--')
    line([opto_off_lap(n),opto_off_lap(n)],[opto_on_lap(n),opto_off_lap(n)],'Color','red','LineStyle','--')
    line([opto_on_lap(n),opto_off_lap(n)],[opto_off_lap(n),opto_off_lap(n)],'Color','red','LineStyle','--')
end

switch_lap = zeros(length(start_frame),1);
end_frame_ind = cumsum(cellfun(@length, ind_cell));
for m = 1:length(start_frame)
    switch_lap(m) = max(E(1:end_frame_ind(m)));
    line([0, switch_lap(m)],[switch_lap(m),switch_lap(m)],'Color','black','LineStyle','--')
    line([switch_lap(m),switch_lap(m)],[0, switch_lap(m)],'Color','black','LineStyle','--')
end
env_switch_lap = switch_lap(1:end-1);
switch_frame = end_frame_ind(1:end-1);

saveas(gcf, ['PCo_all_conds_' day '.png'],'png')

save([behavior_filepaths(1:end-4) optoCond '_align_cell_mean'],'cell_binMean', 'Fc3_DF', 'E', 'start_frame','opto_on_lap','opto_off_lap','onFrames_ind', 'offFrames_ind', 'env_switch_lap', 'switch_frame')
%save([behavior_filepaths(1:end-4) optoCond '_align_cell_mean'],'cell_binMean', 'Fc3_DF', 'E', 'start_frame', 'env_switch_lap')
%save([behavior_filepaths(1:end-4) optoCond '_align_cell_mean'],'cell_binMean', 'Fc3_DF', 'E', 'start_frame', 'env_switch_lap', 'switch_frame')


% py_var = permute(cell_binMean, [2,1,3]);
% save([mouse '_' day optoCond '_py_var'],'py_var')
